<html>
<head>
	<link href="/style.css" media="screen" rel="stylesheet" type="text/css"/> 
	<style>
		html, body {padding: 0; margin: 0}
		.header{ background: #000; padding: 10px; color: #fff; }
		.header a{ color: #ccc;  }
		.code { padding: 10px}
		.hll { background-color: #ffffcc }
.c { color: #408080; font-style: italic } /* Comment */
.err { border: 1px solid #FF0000 } /* Error */
.k { color: #008000; font-weight: bold } /* Keyword */
.o { color: #666666 } /* Operator */
.cm { color: #408080; font-style: italic } /* Comment.Multiline */
.cp { color: #BC7A00 } /* Comment.Preproc */
.c1 { color: #408080; font-style: italic } /* Comment.Single */
.cs { color: #408080; font-style: italic } /* Comment.Special */
.gd { color: #A00000 } /* Generic.Deleted */
.ge { font-style: italic } /* Generic.Emph */
.gr { color: #FF0000 } /* Generic.Error */
.gh { color: #000080; font-weight: bold } /* Generic.Heading */
.gi { color: #00A000 } /* Generic.Inserted */
.go { color: #808080 } /* Generic.Output */
.gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.gs { font-weight: bold } /* Generic.Strong */
.gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.gt { color: #0040D0 } /* Generic.Traceback */
.kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.kp { color: #008000 } /* Keyword.Pseudo */
.kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.kt { color: #B00040 } /* Keyword.Type */
.m { color: #666666 } /* Literal.Number */
.s { color: #BA2121 } /* Literal.String */
.na { color: #7D9029 } /* Name.Attribute */
.nb { color: #008000 } /* Name.Builtin */
.nc { color: #0000FF; font-weight: bold } /* Name.Class */
.no { color: #880000 } /* Name.Constant */
.nd { color: #AA22FF } /* Name.Decorator */
.ni { color: #999999; font-weight: bold } /* Name.Entity */
.ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.nf { color: #0000FF } /* Name.Function */
.nl { color: #A0A000 } /* Name.Label */
.nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.nt { color: #008000; font-weight: bold } /* Name.Tag */
.nv { color: #19177C } /* Name.Variable */
.ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.w { color: #bbbbbb } /* Text.Whitespace */
.mf { color: #666666 } /* Literal.Number.Float */
.mh { color: #666666 } /* Literal.Number.Hex */
.mi { color: #666666 } /* Literal.Number.Integer */
.mo { color: #666666 } /* Literal.Number.Oct */
.sb { color: #BA2121 } /* Literal.String.Backtick */
.sc { color: #BA2121 } /* Literal.String.Char */
.sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.s2 { color: #BA2121 } /* Literal.String.Double */
.se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.sh { color: #BA2121 } /* Literal.String.Heredoc */
.si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.sx { color: #008000 } /* Literal.String.Other */
.sr { color: #BB6688 } /* Literal.String.Regex */
.s1 { color: #BA2121 } /* Literal.String.Single */
.ss { color: #19177C } /* Literal.String.Symbol */
.bp { color: #008000 } /* Name.Builtin.Pseudo */
.vc { color: #19177C } /* Name.Variable.Class */
.vg { color: #19177C } /* Name.Variable.Global */
.vi { color: #19177C } /* Name.Variable.Instance */
.il { color: #666666 } /* Literal.Number.Integer.Long */
	</style>
</head>
<body>
<div class="header">
	<b>Android source code : version at 22/02/2011</b></br>
	Hosted by <a href="http://www.frandroid.com/">FrAndroid</a>, french Android and mobile blog<br/>
	<a href="/">[Index]</a> <a href="http://developer.android.com/">[android.com]</a>
</div>

<div class="code">
<h1>/frameworks/base/media/jni/audioeffect/android_media_AudioEffect.cpp</h1><a href="/frameworks/base/media/jni/audioeffect/">[Parent]</a><div class="highlight"><pre><span class="cm">/*</span>
<span class="cm"> * Copyright (C) 2010 The Android Open Source Project</span>
<span class="cm"> *</span>
<span class="cm"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span>
<span class="cm"> * you may not use this file except in compliance with the License.</span>
<span class="cm"> * You may obtain a copy of the License at</span>
<span class="cm"> *</span>
<span class="cm"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
<span class="cm"> *</span>
<span class="cm"> * Unless required by applicable law or agreed to in writing, software</span>
<span class="cm"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<span class="cm"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<span class="cm"> * See the License for the specific language governing permissions and</span>
<span class="cm"> * limitations under the License.</span>
<span class="cm"> */</span>

<span class="cp">#include &lt;stdio.h&gt;</span>

<span class="cp">//#define LOG_NDEBUG 0</span>
<span class="cp">#define LOG_TAG &quot;AudioEffects-JNI&quot;</span>

<span class="cp">#include &lt;utils/Log.h&gt;</span>
<span class="cp">#include &lt;nativehelper/jni.h&gt;</span>
<span class="cp">#include &lt;nativehelper/JNIHelp.h&gt;</span>
<span class="cp">#include &lt;android_runtime/AndroidRuntime.h&gt;</span>
<span class="cp">#include &quot;media/AudioEffect.h&quot;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">android</span><span class="p">;</span>

<span class="cp">#define AUDIOEFFECT_SUCCESS                      0</span>
<span class="cp">#define AUDIOEFFECT_ERROR                       -1</span>
<span class="cp">#define AUDIOEFFECT_ERROR_ALREADY_EXISTS        -2</span>
<span class="cp">#define AUDIOEFFECT_ERROR_NO_INIT               -3</span>
<span class="cp">#define AUDIOEFFECT_ERROR_BAD_VALUE             -4</span>
<span class="cp">#define AUDIOEFFECT_ERROR_INVALID_OPERATION     -5</span>
<span class="cp">#define AUDIOEFFECT_ERROR_NO_MEMORY             -6</span>
<span class="cp">#define AUDIOEFFECT_ERROR_DEAD_OBJECT           -7</span>

<span class="c1">// ----------------------------------------------------------------------------</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">kClassPathName</span> <span class="o">=</span> <span class="s">&quot;android/media/audiofx/AudioEffect&quot;</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">fields_t</span> <span class="p">{</span>
    <span class="c1">// these fields provide access from C++ to the...</span>
    <span class="n">jclass</span>    <span class="n">clazzEffect</span><span class="p">;</span>          <span class="c1">// AudioEffect class</span>
    <span class="n">jmethodID</span> <span class="n">midPostNativeEvent</span><span class="p">;</span>   <span class="c1">// event post callback method</span>
    <span class="n">jfieldID</span>  <span class="n">fidNativeAudioEffect</span><span class="p">;</span> <span class="c1">// stores in Java the native AudioEffect object</span>
    <span class="n">jfieldID</span>  <span class="n">fidJniData</span><span class="p">;</span>           <span class="c1">// stores in Java additional resources used by the native AudioEffect</span>
    <span class="n">jclass</span>    <span class="n">clazzDesc</span><span class="p">;</span>            <span class="c1">// AudioEffect.Descriptor class</span>
    <span class="n">jmethodID</span> <span class="n">midDescCstor</span><span class="p">;</span>         <span class="c1">// AudioEffect.Descriptor class constructor</span>
<span class="p">};</span>
<span class="k">static</span> <span class="n">fields_t</span> <span class="n">fields</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">effect_callback_cookie</span> <span class="p">{</span>
    <span class="n">jclass</span>      <span class="n">audioEffect_class</span><span class="p">;</span>  <span class="c1">// AudioEffect class</span>
    <span class="n">jobject</span>     <span class="n">audioEffect_ref</span><span class="p">;</span>    <span class="c1">// AudioEffect object instance</span>
 <span class="p">};</span>

<span class="c1">// ----------------------------------------------------------------------------</span>
<span class="k">class</span> <span class="nc">AudioEffectJniStorage</span> <span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
        <span class="n">effect_callback_cookie</span> <span class="n">mCallbackData</span><span class="p">;</span>

    <span class="n">AudioEffectJniStorage</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="o">~</span><span class="n">AudioEffectJniStorage</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">}</span>

<span class="p">};</span>


<span class="k">static</span> <span class="n">jint</span> <span class="n">translateError</span><span class="p">(</span><span class="kt">int</span> <span class="n">code</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nl">NO_ERROR:</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_SUCCESS</span><span class="p">;</span>
    <span class="k">case</span> <span class="nl">ALREADY_EXISTS:</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_ALREADY_EXISTS</span><span class="p">;</span>
    <span class="k">case</span> <span class="nl">NO_INIT:</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_NO_INIT</span><span class="p">;</span>
    <span class="k">case</span> <span class="nl">BAD_VALUE:</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>
    <span class="k">case</span> <span class="nl">INVALID_OPERATION:</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_INVALID_OPERATION</span><span class="p">;</span>
    <span class="k">case</span> <span class="nl">NO_MEMORY:</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_NO_MEMORY</span><span class="p">;</span>
    <span class="k">case</span> <span class="nl">DEAD_OBJECT:</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_DEAD_OBJECT</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">// ----------------------------------------------------------------------------</span>
<span class="k">static</span> <span class="kt">void</span> <span class="n">effectCallback</span><span class="p">(</span><span class="kt">int</span> <span class="n">event</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">user</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">info</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">effect_param_t</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">arg1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">arg2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">jobject</span> <span class="n">obj</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jbyteArray</span> <span class="n">array</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jbyte</span> <span class="o">*</span><span class="n">bytes</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">param</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">size</span><span class="p">;</span>

    <span class="n">effect_callback_cookie</span> <span class="o">*</span><span class="n">callbackInfo</span> <span class="o">=</span> <span class="p">(</span><span class="n">effect_callback_cookie</span> <span class="o">*</span><span class="p">)</span><span class="n">user</span><span class="p">;</span>
    <span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span> <span class="o">=</span> <span class="n">AndroidRuntime</span><span class="o">::</span><span class="n">getJNIEnv</span><span class="p">();</span>

    <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;effectCallback: callbackInfo %p, audioEffect_ref %p audioEffect_class %p&quot;</span><span class="p">,</span>
            <span class="n">callbackInfo</span><span class="p">,</span>
            <span class="n">callbackInfo</span><span class="o">-&gt;</span><span class="n">audioEffect_ref</span><span class="p">,</span>
            <span class="n">callbackInfo</span><span class="o">-&gt;</span><span class="n">audioEffect_class</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">user</span> <span class="o">||</span> <span class="o">!</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGW</span><span class="p">(</span><span class="s">&quot;effectCallback error user %p, env %p&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">env</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">switch</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">AudioEffect</span><span class="o">::</span><span class="nl">EVENT_CONTROL_STATUS_CHANGED:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">info</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">LOGW</span><span class="p">(</span><span class="s">&quot;EVENT_CONTROL_STATUS_CHANGED info == NULL&quot;</span><span class="p">);</span>
            <span class="k">goto</span> <span class="n">effectCallback_Exit</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">param</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">bool</span> <span class="o">*</span><span class="p">)</span><span class="n">info</span><span class="p">;</span>
        <span class="n">arg1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">param</span><span class="p">;</span>
        <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;EVENT_CONTROL_STATUS_CHANGED&quot;</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">AudioEffect</span><span class="o">::</span><span class="nl">EVENT_ENABLE_STATUS_CHANGED:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">info</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">LOGW</span><span class="p">(</span><span class="s">&quot;EVENT_ENABLE_STATUS_CHANGED info == NULL&quot;</span><span class="p">);</span>
            <span class="k">goto</span> <span class="n">effectCallback_Exit</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">param</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">bool</span> <span class="o">*</span><span class="p">)</span><span class="n">info</span><span class="p">;</span>
        <span class="n">arg1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">param</span><span class="p">;</span>
        <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;EVENT_ENABLE_STATUS_CHANGED&quot;</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">AudioEffect</span><span class="o">::</span><span class="nl">EVENT_PARAMETER_CHANGED:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">info</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">LOGW</span><span class="p">(</span><span class="s">&quot;EVENT_PARAMETER_CHANGED info == NULL&quot;</span><span class="p">);</span>
            <span class="k">goto</span> <span class="n">effectCallback_Exit</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">effect_param_t</span> <span class="o">*</span><span class="p">)</span><span class="n">info</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">psize</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">vsize</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">goto</span> <span class="n">effectCallback_Exit</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">// arg1 contains offset of parameter value from start of byte array</span>
        <span class="n">arg1</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">effect_param_t</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">psize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
        <span class="n">size</span> <span class="o">=</span> <span class="n">arg1</span> <span class="o">+</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">vsize</span><span class="p">;</span>
        <span class="n">array</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewByteArray</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">array</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;effectCallback: Couldn&#39;t allocate byte array for parameter data&quot;</span><span class="p">);</span>
            <span class="k">goto</span> <span class="n">effectCallback_Exit</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">bytes</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetByteArrayElements</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="n">memcpy</span><span class="p">(</span><span class="n">bytes</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseByteArrayElements</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">bytes</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="n">array</span><span class="p">;</span>
        <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;EVENT_PARAMETER_CHANGED&quot;</span><span class="p">);</span>
       <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">AudioEffect</span><span class="o">::</span><span class="nl">EVENT_ERROR:</span>
        <span class="n">LOGW</span><span class="p">(</span><span class="s">&quot;EVENT_ERROR&quot;</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">env</span><span class="o">-&gt;</span><span class="n">CallStaticVoidMethod</span><span class="p">(</span>
        <span class="n">callbackInfo</span><span class="o">-&gt;</span><span class="n">audioEffect_class</span><span class="p">,</span>
        <span class="n">fields</span><span class="p">.</span><span class="n">midPostNativeEvent</span><span class="p">,</span>
        <span class="n">callbackInfo</span><span class="o">-&gt;</span><span class="n">audioEffect_ref</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>

<span class="nl">effectCallback_Exit:</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">ExceptionCheck</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ExceptionDescribe</span><span class="p">();</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ExceptionClear</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ----------------------------------------------------------------------------</span>
<span class="c1">// This function gets some field IDs, which in turn causes class initialization.</span>
<span class="c1">// It is called from a static block in AudioEffect, which won&#39;t run until the</span>
<span class="c1">// first time an instance of this class is used.</span>
<span class="k">static</span> <span class="kt">void</span>
<span class="n">android_media_AudioEffect_native_init</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">)</span>
<span class="p">{</span>

    <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;android_media_AudioEffect_native_init&quot;</span><span class="p">);</span>

    <span class="n">fields</span><span class="p">.</span><span class="n">clazzEffect</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">fields</span><span class="p">.</span><span class="n">clazzDesc</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="c1">// Get the AudioEffect class</span>
    <span class="n">jclass</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="n">kClassPathName</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">clazz</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Can&#39;t find %s&quot;</span><span class="p">,</span> <span class="n">kClassPathName</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">fields</span><span class="p">.</span><span class="n">clazzEffect</span> <span class="o">=</span> <span class="p">(</span><span class="n">jclass</span><span class="p">)</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">NewGlobalRef</span><span class="p">(</span><span class="n">clazz</span><span class="p">);</span>

    <span class="c1">// Get the postEvent method</span>
    <span class="n">fields</span><span class="p">.</span><span class="n">midPostNativeEvent</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStaticMethodID</span><span class="p">(</span>
            <span class="n">fields</span><span class="p">.</span><span class="n">clazzEffect</span><span class="p">,</span>
            <span class="s">&quot;postEventFromNative&quot;</span><span class="p">,</span> <span class="s">&quot;(Ljava/lang/Object;IIILjava/lang/Object;)V&quot;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fields</span><span class="p">.</span><span class="n">midPostNativeEvent</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Can&#39;t find AudioEffect.%s&quot;</span><span class="p">,</span> <span class="s">&quot;postEventFromNative&quot;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Get the variables fields</span>
    <span class="c1">//      nativeTrackInJavaObj</span>
    <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetFieldID</span><span class="p">(</span>
            <span class="n">fields</span><span class="p">.</span><span class="n">clazzEffect</span><span class="p">,</span>
            <span class="s">&quot;mNativeAudioEffect&quot;</span><span class="p">,</span> <span class="s">&quot;I&quot;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Can&#39;t find AudioEffect.%s&quot;</span><span class="p">,</span> <span class="s">&quot;mNativeAudioEffect&quot;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//      fidJniData;</span>
    <span class="n">fields</span><span class="p">.</span><span class="n">fidJniData</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetFieldID</span><span class="p">(</span>
            <span class="n">fields</span><span class="p">.</span><span class="n">clazzEffect</span><span class="p">,</span>
            <span class="s">&quot;mJniData&quot;</span><span class="p">,</span> <span class="s">&quot;I&quot;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fields</span><span class="p">.</span><span class="n">fidJniData</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Can&#39;t find AudioEffect.%s&quot;</span><span class="p">,</span> <span class="s">&quot;mJniData&quot;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">clazz</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;android/media/audiofx/AudioEffect$Descriptor&quot;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">clazz</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Can&#39;t find android/media/audiofx/AudioEffect$Descriptor class&quot;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">fields</span><span class="p">.</span><span class="n">clazzDesc</span> <span class="o">=</span> <span class="p">(</span><span class="n">jclass</span><span class="p">)</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">NewGlobalRef</span><span class="p">(</span><span class="n">clazz</span><span class="p">);</span>

    <span class="n">fields</span><span class="p">.</span><span class="n">midDescCstor</span>
            <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span>
                    <span class="n">fields</span><span class="p">.</span><span class="n">clazzDesc</span><span class="p">,</span>
                    <span class="s">&quot;&lt;init&gt;&quot;</span><span class="p">,</span>
                    <span class="s">&quot;(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V&quot;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fields</span><span class="p">.</span><span class="n">midDescCstor</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Can&#39;t find android/media/audiofx/AudioEffect$Descriptor class constructor&quot;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">static</span> <span class="n">jint</span>
<span class="n">android_media_AudioEffect_native_setup</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">thiz</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">weak_this</span><span class="p">,</span>
        <span class="n">jstring</span> <span class="n">type</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">uuid</span><span class="p">,</span> <span class="n">jint</span> <span class="n">priority</span><span class="p">,</span> <span class="n">jint</span> <span class="n">sessionId</span><span class="p">,</span> <span class="n">jintArray</span> <span class="n">jId</span><span class="p">,</span> <span class="n">jobjectArray</span> <span class="n">javadesc</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;android_media_AudioEffect_native_setup&quot;</span><span class="p">);</span>
    <span class="n">AudioEffectJniStorage</span><span class="o">*</span> <span class="n">lpJniStorage</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">lStatus</span> <span class="o">=</span> <span class="n">AUDIOEFFECT_ERROR_NO_MEMORY</span><span class="p">;</span>
    <span class="n">AudioEffect</span><span class="o">*</span> <span class="n">lpAudioEffect</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jint</span><span class="o">*</span> <span class="n">nId</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">typeStr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">uuidStr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">effect_descriptor_t</span> <span class="n">desc</span><span class="p">;</span>
    <span class="n">jobject</span> <span class="n">jdesc</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">EFFECT_STRING_LEN_MAX</span><span class="p">];</span>
    <span class="n">jstring</span> <span class="n">jdescType</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescUuid</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescConnect</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescName</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescImplementor</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">typeStr</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">typeStr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// Out of memory</span>
            <span class="n">jniThrowException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;java/lang/RuntimeException&quot;</span><span class="p">,</span> <span class="s">&quot;Out of memory&quot;</span><span class="p">);</span>
            <span class="k">goto</span> <span class="n">setup_failure</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">uuid</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">uuidStr</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">uuidStr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// Out of memory</span>
            <span class="n">jniThrowException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;java/lang/RuntimeException&quot;</span><span class="p">,</span> <span class="s">&quot;Out of memory&quot;</span><span class="p">);</span>
            <span class="k">goto</span> <span class="n">setup_failure</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">typeStr</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">uuidStr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">lStatus</span> <span class="o">=</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">setup_failure</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">lpJniStorage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AudioEffectJniStorage</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpJniStorage</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;setup: Error creating JNI Storage&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">setup_failure</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">lpJniStorage</span><span class="o">-&gt;</span><span class="n">mCallbackData</span><span class="p">.</span><span class="n">audioEffect_class</span> <span class="o">=</span> <span class="p">(</span><span class="n">jclass</span><span class="p">)</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">NewGlobalRef</span><span class="p">(</span><span class="n">fields</span><span class="p">.</span><span class="n">clazzEffect</span><span class="p">);</span>
    <span class="c1">// we use a weak reference so the AudioEffect object can be garbage collected.</span>
    <span class="n">lpJniStorage</span><span class="o">-&gt;</span><span class="n">mCallbackData</span><span class="p">.</span><span class="n">audioEffect_ref</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewGlobalRef</span><span class="p">(</span><span class="n">weak_this</span><span class="p">);</span>

    <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;setup: lpJniStorage: %p audioEffect_ref %p audioEffect_class %p, &amp;mCallbackData %p&quot;</span><span class="p">,</span>
            <span class="n">lpJniStorage</span><span class="p">,</span>
            <span class="n">lpJniStorage</span><span class="o">-&gt;</span><span class="n">mCallbackData</span><span class="p">.</span><span class="n">audioEffect_ref</span><span class="p">,</span>
            <span class="n">lpJniStorage</span><span class="o">-&gt;</span><span class="n">mCallbackData</span><span class="p">.</span><span class="n">audioEffect_class</span><span class="p">,</span>
            <span class="o">&amp;</span><span class="n">lpJniStorage</span><span class="o">-&gt;</span><span class="n">mCallbackData</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">jId</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;setup: NULL java array for id pointer&quot;</span><span class="p">);</span>
        <span class="n">lStatus</span> <span class="o">=</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">setup_failure</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// create the native AudioEffect object</span>
    <span class="n">lpAudioEffect</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AudioEffect</span><span class="p">(</span><span class="n">typeStr</span><span class="p">,</span>
                                    <span class="n">uuidStr</span><span class="p">,</span>
                                    <span class="n">priority</span><span class="p">,</span>
                                    <span class="n">effectCallback</span><span class="p">,</span>
                                    <span class="o">&amp;</span><span class="n">lpJniStorage</span><span class="o">-&gt;</span><span class="n">mCallbackData</span><span class="p">,</span>
                                    <span class="n">sessionId</span><span class="p">,</span>
                                    <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Error creating AudioEffect&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">setup_failure</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">lStatus</span> <span class="o">=</span> <span class="n">translateError</span><span class="p">(</span><span class="n">lpAudioEffect</span><span class="o">-&gt;</span><span class="n">initCheck</span><span class="p">());</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lStatus</span> <span class="o">!=</span> <span class="n">AUDIOEFFECT_SUCCESS</span> <span class="o">&amp;&amp;</span> <span class="n">lStatus</span> <span class="o">!=</span> <span class="n">AUDIOEFFECT_ERROR_ALREADY_EXISTS</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;AudioEffect initCheck failed %d&quot;</span><span class="p">,</span> <span class="n">lStatus</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">setup_failure</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">nId</span> <span class="o">=</span> <span class="p">(</span><span class="n">jint</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetPrimitiveArrayCritical</span><span class="p">(</span><span class="n">jId</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">nId</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;setup: Error retrieving id pointer&quot;</span><span class="p">);</span>
        <span class="n">lStatus</span> <span class="o">=</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">setup_failure</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">nId</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">lpAudioEffect</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">();</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleasePrimitiveArrayCritical</span><span class="p">(</span><span class="n">jId</span><span class="p">,</span> <span class="n">nId</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">nId</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">typeStr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">typeStr</span><span class="p">);</span>
        <span class="n">typeStr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">uuidStr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">uuidStr</span><span class="p">);</span>
        <span class="n">uuidStr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// get the effect descriptor</span>
    <span class="n">desc</span> <span class="o">=</span> <span class="n">lpAudioEffect</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="p">();</span>

    <span class="n">AudioEffect</span><span class="o">::</span><span class="n">guidToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">desc</span><span class="p">.</span><span class="n">type</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">EFFECT_STRING_LEN_MAX</span><span class="p">);</span>
    <span class="n">jdescType</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>

    <span class="n">AudioEffect</span><span class="o">::</span><span class="n">guidToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">desc</span><span class="p">.</span><span class="n">uuid</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">EFFECT_STRING_LEN_MAX</span><span class="p">);</span>
    <span class="n">jdescUuid</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">desc</span><span class="p">.</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">EFFECT_FLAG_TYPE_MASK</span><span class="p">)</span> <span class="o">==</span> <span class="n">EFFECT_FLAG_TYPE_AUXILIARY</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">jdescConnect</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="s">&quot;Auxiliary&quot;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">desc</span><span class="p">.</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">EFFECT_FLAG_TYPE_MASK</span><span class="p">)</span> <span class="o">==</span> <span class="n">EFFECT_FLAG_TYPE_PRE_PROC</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">jdescConnect</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="s">&quot;Pre Processing&quot;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">jdescConnect</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="s">&quot;Insert&quot;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">jdescName</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">desc</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
    <span class="n">jdescImplementor</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">desc</span><span class="p">.</span><span class="n">implementor</span><span class="p">);</span>

    <span class="n">jdesc</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewObject</span><span class="p">(</span><span class="n">fields</span><span class="p">.</span><span class="n">clazzDesc</span><span class="p">,</span>
                           <span class="n">fields</span><span class="p">.</span><span class="n">midDescCstor</span><span class="p">,</span>
                           <span class="n">jdescType</span><span class="p">,</span>
                           <span class="n">jdescUuid</span><span class="p">,</span>
                           <span class="n">jdescConnect</span><span class="p">,</span>
                           <span class="n">jdescName</span><span class="p">,</span>
                           <span class="n">jdescImplementor</span><span class="p">);</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescType</span><span class="p">);</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescUuid</span><span class="p">);</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescConnect</span><span class="p">);</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescName</span><span class="p">);</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescImplementor</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">jdesc</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;env-&gt;NewObject(fields.clazzDesc, fields.midDescCstor)&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">setup_failure</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetObjectArrayElement</span><span class="p">(</span><span class="n">javadesc</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">jdesc</span><span class="p">);</span>

    <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">lpAudioEffect</span><span class="p">);</span>

    <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidJniData</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">lpJniStorage</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">AUDIOEFFECT_SUCCESS</span><span class="p">;</span>

    <span class="c1">// failures:</span>
<span class="nl">setup_failure:</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">nId</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleasePrimitiveArrayCritical</span><span class="p">(</span><span class="n">jId</span><span class="p">,</span> <span class="n">nId</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">delete</span> <span class="n">lpAudioEffect</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpJniStorage</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">delete</span> <span class="n">lpJniStorage</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidJniData</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">uuidStr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">uuidStr</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">typeStr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">typeStr</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">lStatus</span><span class="p">;</span>
<span class="p">}</span>


<span class="c1">// ----------------------------------------------------------------------------</span>
<span class="k">static</span> <span class="kt">void</span> <span class="n">android_media_AudioEffect_native_finalize</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span>  <span class="n">jobject</span> <span class="n">thiz</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;android_media_AudioEffect_native_finalize jobject: %x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">thiz</span><span class="p">);</span>

    <span class="c1">// delete the AudioEffect object</span>
    <span class="n">AudioEffect</span><span class="o">*</span> <span class="n">lpAudioEffect</span> <span class="o">=</span> <span class="p">(</span><span class="n">AudioEffect</span> <span class="o">*</span><span class="p">)</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span>
        <span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;deleting AudioEffect: %x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">lpAudioEffect</span><span class="p">);</span>
        <span class="k">delete</span> <span class="n">lpAudioEffect</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// delete the JNI data</span>
    <span class="n">AudioEffectJniStorage</span><span class="o">*</span> <span class="n">lpJniStorage</span> <span class="o">=</span> <span class="p">(</span><span class="n">AudioEffectJniStorage</span> <span class="o">*</span><span class="p">)</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span>
        <span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidJniData</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpJniStorage</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;deleting pJniStorage: %x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">lpJniStorage</span><span class="p">);</span>
        <span class="k">delete</span> <span class="n">lpJniStorage</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ----------------------------------------------------------------------------</span>
<span class="k">static</span> <span class="kt">void</span> <span class="n">android_media_AudioEffect_native_release</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span>  <span class="n">jobject</span> <span class="n">thiz</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// do everything a call to finalize would</span>
    <span class="n">android_media_AudioEffect_native_finalize</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">thiz</span><span class="p">);</span>
    <span class="c1">// + reset the native resources in the Java object so any attempt to access</span>
    <span class="c1">// them after a call to release fails.</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidJniData</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">jint</span>
<span class="n">android_media_AudioEffect_native_setEnabled</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">thiz</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">enabled</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// retrieve the AudioEffect object</span>
    <span class="n">AudioEffect</span><span class="o">*</span> <span class="n">lpAudioEffect</span> <span class="o">=</span> <span class="p">(</span><span class="n">AudioEffect</span> <span class="o">*</span><span class="p">)</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span>
        <span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">jniThrowException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;java/lang/IllegalStateException&quot;</span><span class="p">,</span>
            <span class="s">&quot;Unable to retrieve AudioEffect pointer for enable()&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_NO_INIT</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">translateError</span><span class="p">(</span><span class="n">lpAudioEffect</span><span class="o">-&gt;</span><span class="n">setEnabled</span><span class="p">(</span><span class="n">enabled</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">jboolean</span>
<span class="n">android_media_AudioEffect_native_getEnabled</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">thiz</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// retrieve the AudioEffect object</span>
    <span class="n">AudioEffect</span><span class="o">*</span> <span class="n">lpAudioEffect</span> <span class="o">=</span> <span class="p">(</span><span class="n">AudioEffect</span> <span class="o">*</span><span class="p">)</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span>
        <span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">jniThrowException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;java/lang/IllegalStateException&quot;</span><span class="p">,</span>
            <span class="s">&quot;Unable to retrieve AudioEffect pointer for getEnabled()&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">(</span><span class="n">jboolean</span><span class="p">)</span><span class="n">lpAudioEffect</span><span class="o">-&gt;</span><span class="n">getEnabled</span><span class="p">();</span>
<span class="p">}</span>


<span class="k">static</span> <span class="n">jboolean</span>
<span class="n">android_media_AudioEffect_native_hasControl</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">thiz</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// retrieve the AudioEffect object</span>
    <span class="n">AudioEffect</span><span class="o">*</span> <span class="n">lpAudioEffect</span> <span class="o">=</span> <span class="p">(</span><span class="n">AudioEffect</span> <span class="o">*</span><span class="p">)</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span>
        <span class="n">thiz</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">jniThrowException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;java/lang/IllegalStateException&quot;</span><span class="p">,</span>
            <span class="s">&quot;Unable to retrieve AudioEffect pointer for hasControl()&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span><span class="o">-&gt;</span><span class="n">initCheck</span><span class="p">()</span> <span class="o">==</span> <span class="n">NO_ERROR</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">jint</span> <span class="n">android_media_AudioEffect_native_setParameter</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span>
        <span class="n">jobject</span> <span class="n">thiz</span><span class="p">,</span> <span class="kt">int</span> <span class="n">psize</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">pJavaParam</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vsize</span><span class="p">,</span>
        <span class="n">jbyteArray</span> <span class="n">pJavaValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// retrieve the AudioEffect object</span>
    <span class="n">jbyte</span><span class="o">*</span> <span class="n">lpValue</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jbyte</span><span class="o">*</span> <span class="n">lpParam</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jint</span> <span class="n">lStatus</span> <span class="o">=</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>
    <span class="n">effect_param_t</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">voffset</span><span class="p">;</span>

    <span class="n">AudioEffect</span><span class="o">*</span> <span class="n">lpAudioEffect</span> <span class="o">=</span> <span class="p">(</span><span class="n">AudioEffect</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">thiz</span><span class="p">,</span>
            <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">jniThrowException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;java/lang/IllegalStateException&quot;</span><span class="p">,</span>
                <span class="s">&quot;Unable to retrieve AudioEffect pointer for setParameter()&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_NO_INIT</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">psize</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">vsize</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">pJavaParam</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">pJavaValue</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// get the pointer for the param from the java array</span>
    <span class="n">lpParam</span> <span class="o">=</span> <span class="p">(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetPrimitiveArrayCritical</span><span class="p">(</span><span class="n">pJavaParam</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpParam</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;setParameter: Error retrieving param pointer&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">setParameter_Exit</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// get the pointer for the value from the java array</span>
    <span class="n">lpValue</span> <span class="o">=</span> <span class="p">(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetPrimitiveArrayCritical</span><span class="p">(</span><span class="n">pJavaValue</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpValue</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;setParameter: Error retrieving value pointer&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">setParameter_Exit</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">voffset</span> <span class="o">=</span> <span class="p">((</span><span class="n">psize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">effect_param_t</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">effect_param_t</span><span class="p">)</span> <span class="o">+</span> <span class="n">voffset</span> <span class="o">+</span> <span class="n">vsize</span><span class="p">);</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">lpParam</span><span class="p">,</span> <span class="n">psize</span><span class="p">);</span>
    <span class="n">p</span><span class="o">-&gt;</span><span class="n">psize</span> <span class="o">=</span> <span class="n">psize</span><span class="p">;</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">+</span> <span class="n">voffset</span><span class="p">,</span> <span class="n">lpValue</span><span class="p">,</span> <span class="n">vsize</span><span class="p">);</span>
    <span class="n">p</span><span class="o">-&gt;</span><span class="n">vsize</span> <span class="o">=</span> <span class="n">vsize</span><span class="p">;</span>

    <span class="n">lStatus</span> <span class="o">=</span> <span class="n">lpAudioEffect</span><span class="o">-&gt;</span><span class="n">setParameter</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lStatus</span> <span class="o">==</span> <span class="n">NO_ERROR</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">lStatus</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>

<span class="nl">setParameter_Exit:</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpParam</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleasePrimitiveArrayCritical</span><span class="p">(</span><span class="n">pJavaParam</span><span class="p">,</span> <span class="n">lpParam</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpValue</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleasePrimitiveArrayCritical</span><span class="p">(</span><span class="n">pJavaValue</span><span class="p">,</span> <span class="n">lpValue</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">translateError</span><span class="p">(</span><span class="n">lStatus</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">jint</span>
<span class="n">android_media_AudioEffect_native_getParameter</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span>
        <span class="n">jobject</span> <span class="n">thiz</span><span class="p">,</span> <span class="n">jint</span> <span class="n">psize</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">pJavaParam</span><span class="p">,</span>
        <span class="n">jint</span> <span class="n">vsize</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">pJavaValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// retrieve the AudioEffect object</span>
    <span class="n">jbyte</span><span class="o">*</span> <span class="n">lpParam</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jbyte</span><span class="o">*</span> <span class="n">lpValue</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jint</span> <span class="n">lStatus</span> <span class="o">=</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>
    <span class="n">effect_param_t</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">voffset</span><span class="p">;</span>

    <span class="n">AudioEffect</span><span class="o">*</span> <span class="n">lpAudioEffect</span> <span class="o">=</span> <span class="p">(</span><span class="n">AudioEffect</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">thiz</span><span class="p">,</span>
            <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">jniThrowException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;java/lang/IllegalStateException&quot;</span><span class="p">,</span>
                <span class="s">&quot;Unable to retrieve AudioEffect pointer for getParameter()&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_NO_INIT</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">psize</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">vsize</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">pJavaParam</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">pJavaValue</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// get the pointer for the param from the java array</span>
    <span class="n">lpParam</span> <span class="o">=</span> <span class="p">(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetPrimitiveArrayCritical</span><span class="p">(</span><span class="n">pJavaParam</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpParam</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;getParameter: Error retrieving param pointer&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">getParameter_Exit</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// get the pointer for the value from the java array</span>
    <span class="n">lpValue</span> <span class="o">=</span> <span class="p">(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetPrimitiveArrayCritical</span><span class="p">(</span><span class="n">pJavaValue</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpValue</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;getParameter: Error retrieving value pointer&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">getParameter_Exit</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">voffset</span> <span class="o">=</span> <span class="p">((</span><span class="n">psize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">effect_param_t</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">effect_param_t</span><span class="p">)</span> <span class="o">+</span> <span class="n">voffset</span> <span class="o">+</span> <span class="n">vsize</span><span class="p">);</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">lpParam</span><span class="p">,</span> <span class="n">psize</span><span class="p">);</span>
    <span class="n">p</span><span class="o">-&gt;</span><span class="n">psize</span> <span class="o">=</span> <span class="n">psize</span><span class="p">;</span>
    <span class="n">p</span><span class="o">-&gt;</span><span class="n">vsize</span> <span class="o">=</span> <span class="n">vsize</span><span class="p">;</span>

    <span class="n">lStatus</span> <span class="o">=</span> <span class="n">lpAudioEffect</span><span class="o">-&gt;</span><span class="n">getParameter</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lStatus</span> <span class="o">==</span> <span class="n">NO_ERROR</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">lStatus</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">lStatus</span> <span class="o">==</span> <span class="n">NO_ERROR</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">memcpy</span><span class="p">(</span><span class="n">lpValue</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">+</span> <span class="n">voffset</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">vsize</span><span class="p">);</span>
            <span class="n">vsize</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">vsize</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>

<span class="nl">getParameter_Exit:</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpParam</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleasePrimitiveArrayCritical</span><span class="p">(</span><span class="n">pJavaParam</span><span class="p">,</span> <span class="n">lpParam</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpValue</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleasePrimitiveArrayCritical</span><span class="p">(</span><span class="n">pJavaValue</span><span class="p">,</span> <span class="n">lpValue</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lStatus</span> <span class="o">==</span> <span class="n">NO_ERROR</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">vsize</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">translateError</span><span class="p">(</span><span class="n">lStatus</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">jint</span> <span class="n">android_media_AudioEffect_native_command</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">thiz</span><span class="p">,</span>
        <span class="n">jint</span> <span class="n">cmdCode</span><span class="p">,</span> <span class="n">jint</span> <span class="n">cmdSize</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">jCmdData</span><span class="p">,</span> <span class="n">jint</span> <span class="n">replySize</span><span class="p">,</span>
        <span class="n">jbyteArray</span> <span class="n">jReplyData</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">jbyte</span><span class="o">*</span> <span class="n">pCmdData</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jbyte</span><span class="o">*</span> <span class="n">pReplyData</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jint</span> <span class="n">lStatus</span> <span class="o">=</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>

    <span class="c1">// retrieve the AudioEffect object</span>
    <span class="n">AudioEffect</span><span class="o">*</span> <span class="n">lpAudioEffect</span> <span class="o">=</span> <span class="p">(</span><span class="n">AudioEffect</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">thiz</span><span class="p">,</span>
            <span class="n">fields</span><span class="p">.</span><span class="n">fidNativeAudioEffect</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lpAudioEffect</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">jniThrowException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;java/lang/IllegalStateException&quot;</span><span class="p">,</span>
                <span class="s">&quot;Unable to retrieve AudioEffect pointer for setParameter()&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_NO_INIT</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">cmdSize</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">jCmdData</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">replySize</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">jReplyData</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">AUDIOEFFECT_ERROR_BAD_VALUE</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// get the pointer for the command from the java array</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cmdSize</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pCmdData</span> <span class="o">=</span> <span class="p">(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetPrimitiveArrayCritical</span><span class="p">(</span><span class="n">jCmdData</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pCmdData</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;setParameter: Error retrieving command pointer&quot;</span><span class="p">);</span>
            <span class="k">goto</span> <span class="n">command_Exit</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// get the pointer for the reply from the java array</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">replySize</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">jReplyData</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pReplyData</span> <span class="o">=</span> <span class="p">(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetPrimitiveArrayCritical</span><span class="p">(</span><span class="n">jReplyData</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pReplyData</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;setParameter: Error retrieving reply pointer&quot;</span><span class="p">);</span>
            <span class="k">goto</span> <span class="n">command_Exit</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">lStatus</span> <span class="o">=</span> <span class="n">translateError</span><span class="p">(</span><span class="n">lpAudioEffect</span><span class="o">-&gt;</span><span class="n">command</span><span class="p">((</span><span class="n">uint32_t</span><span class="p">)</span><span class="n">cmdCode</span><span class="p">,</span>
                                                    <span class="p">(</span><span class="n">uint32_t</span><span class="p">)</span><span class="n">cmdSize</span><span class="p">,</span>
                                                    <span class="n">pCmdData</span><span class="p">,</span>
                                                    <span class="p">(</span><span class="n">uint32_t</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">replySize</span><span class="p">,</span>
                                                    <span class="n">pReplyData</span><span class="p">));</span>

<span class="nl">command_Exit:</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">pCmdData</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleasePrimitiveArrayCritical</span><span class="p">(</span><span class="n">jCmdData</span><span class="p">,</span> <span class="n">pCmdData</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pReplyData</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleasePrimitiveArrayCritical</span><span class="p">(</span><span class="n">jReplyData</span><span class="p">,</span> <span class="n">pReplyData</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">lStatus</span> <span class="o">==</span> <span class="n">NO_ERROR</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">replySize</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">lStatus</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">jobjectArray</span>
<span class="n">android_media_AudioEffect_native_queryEffects</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">effect_descriptor_t</span> <span class="n">desc</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">EFFECT_STRING_LEN_MAX</span><span class="p">];</span>
    <span class="n">uint32_t</span> <span class="n">numEffects</span><span class="p">;</span>
    <span class="n">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescType</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescUuid</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescConnect</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescName</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescImplementor</span><span class="p">;</span>
    <span class="n">jobject</span> <span class="n">jdesc</span><span class="p">;</span>

    <span class="n">AudioEffect</span><span class="o">::</span><span class="n">queryNumberEffects</span><span class="p">(</span><span class="o">&amp;</span><span class="n">numEffects</span><span class="p">);</span>
    <span class="n">jobjectArray</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewObjectArray</span><span class="p">(</span><span class="n">numEffects</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">clazzDesc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;queryEffects() numEffects: %d&quot;</span><span class="p">,</span> <span class="n">numEffects</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numEffects</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">AudioEffect</span><span class="o">::</span><span class="n">queryEffect</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">desc</span><span class="p">)</span> <span class="o">!=</span> <span class="n">NO_ERROR</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">goto</span> <span class="n">queryEffects_failure</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">((</span><span class="n">desc</span><span class="p">.</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">EFFECT_FLAG_TYPE_MASK</span><span class="p">)</span> <span class="o">==</span> <span class="n">EFFECT_FLAG_TYPE_AUXILIARY</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">jdescConnect</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="s">&quot;Auxiliary&quot;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">desc</span><span class="p">.</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">EFFECT_FLAG_TYPE_MASK</span><span class="p">)</span> <span class="o">==</span> <span class="n">EFFECT_FLAG_TYPE_INSERT</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">jdescConnect</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="s">&quot;Insert&quot;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">desc</span><span class="p">.</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">EFFECT_FLAG_TYPE_MASK</span><span class="p">)</span> <span class="o">==</span> <span class="n">EFFECT_FLAG_TYPE_PRE_PROC</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">jdescConnect</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="s">&quot;Pre Processing&quot;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">AudioEffect</span><span class="o">::</span><span class="n">guidToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">desc</span><span class="p">.</span><span class="n">type</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">EFFECT_STRING_LEN_MAX</span><span class="p">);</span>
        <span class="n">jdescType</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>

        <span class="n">AudioEffect</span><span class="o">::</span><span class="n">guidToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">desc</span><span class="p">.</span><span class="n">uuid</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">EFFECT_STRING_LEN_MAX</span><span class="p">);</span>
        <span class="n">jdescUuid</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>

        <span class="n">jdescName</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">desc</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
        <span class="n">jdescImplementor</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">desc</span><span class="p">.</span><span class="n">implementor</span><span class="p">);</span>

        <span class="n">jdesc</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewObject</span><span class="p">(</span><span class="n">fields</span><span class="p">.</span><span class="n">clazzDesc</span><span class="p">,</span>
                               <span class="n">fields</span><span class="p">.</span><span class="n">midDescCstor</span><span class="p">,</span>
                               <span class="n">jdescType</span><span class="p">,</span>
                               <span class="n">jdescUuid</span><span class="p">,</span>
                               <span class="n">jdescConnect</span><span class="p">,</span>
                               <span class="n">jdescName</span><span class="p">,</span>
                               <span class="n">jdescImplementor</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescType</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescUuid</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescConnect</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescName</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescImplementor</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">jdesc</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;env-&gt;NewObject(fields.clazzDesc, fields.midDescCstor)&quot;</span><span class="p">);</span>
            <span class="k">goto</span> <span class="n">queryEffects_failure</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetObjectArrayElement</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">jdesc</span><span class="p">);</span>
   <span class="p">}</span>

    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>

<span class="nl">queryEffects_failure:</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">ret</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

<span class="p">}</span>



<span class="k">static</span> <span class="n">jobjectArray</span>
<span class="n">android_media_AudioEffect_native_queryPreProcessings</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jint</span> <span class="n">audioSession</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// kDefaultNumEffects is a &quot;reasonable&quot; value ensuring that only one query will be enough on</span>
    <span class="c1">// most devices to get all active audio pre processing on a given session.</span>
    <span class="k">static</span> <span class="k">const</span> <span class="n">uint32_t</span> <span class="n">kDefaultNumEffects</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

    <span class="n">effect_descriptor_t</span> <span class="o">*</span><span class="n">descriptors</span> <span class="o">=</span> <span class="k">new</span> <span class="n">effect_descriptor_t</span><span class="p">[</span><span class="n">kDefaultNumEffects</span><span class="p">];</span>
    <span class="n">uint32_t</span> <span class="n">numEffects</span> <span class="o">=</span> <span class="n">kDefaultNumEffects</span><span class="p">;</span>

    <span class="n">status_t</span> <span class="n">status</span> <span class="o">=</span> <span class="n">AudioEffect</span><span class="o">::</span><span class="n">queryDefaultPreProcessing</span><span class="p">(</span><span class="n">audioSession</span><span class="p">,</span>
                                           <span class="n">descriptors</span><span class="p">,</span>
                                           <span class="o">&amp;</span><span class="n">numEffects</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">status</span> <span class="o">!=</span> <span class="n">NO_ERROR</span> <span class="o">&amp;&amp;</span> <span class="n">status</span> <span class="o">!=</span> <span class="n">NO_MEMORY</span><span class="p">)</span> <span class="o">||</span>
            <span class="n">numEffects</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">delete</span><span class="p">[]</span> <span class="n">descriptors</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">NO_MEMORY</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">delete</span> <span class="p">[]</span> <span class="n">descriptors</span><span class="p">;</span>
        <span class="n">descriptors</span> <span class="o">=</span> <span class="k">new</span> <span class="n">effect_descriptor_t</span><span class="p">[</span><span class="n">numEffects</span><span class="p">];</span>
        <span class="n">status</span> <span class="o">=</span> <span class="n">AudioEffect</span><span class="o">::</span><span class="n">queryDefaultPreProcessing</span><span class="p">(</span><span class="n">audioSession</span><span class="p">,</span>
                                               <span class="n">descriptors</span><span class="p">,</span>
                                               <span class="o">&amp;</span><span class="n">numEffects</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">!=</span> <span class="n">NO_ERROR</span> <span class="o">||</span> <span class="n">numEffects</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">delete</span><span class="p">[]</span> <span class="n">descriptors</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">LOGV</span><span class="p">(</span><span class="s">&quot;queryDefaultPreProcessing() got %d effects&quot;</span><span class="p">,</span> <span class="n">numEffects</span><span class="p">);</span>

    <span class="n">jobjectArray</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewObjectArray</span><span class="p">(</span><span class="n">numEffects</span><span class="p">,</span> <span class="n">fields</span><span class="p">.</span><span class="n">clazzDesc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">delete</span><span class="p">[]</span> <span class="n">descriptors</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">EFFECT_STRING_LEN_MAX</span><span class="p">];</span>
    <span class="n">jstring</span> <span class="n">jdescType</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescUuid</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescConnect</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescName</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">jdescImplementor</span><span class="p">;</span>
    <span class="n">jobject</span> <span class="n">jdesc</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numEffects</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>

        <span class="n">AudioEffect</span><span class="o">::</span><span class="n">guidToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">descriptors</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">type</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">EFFECT_STRING_LEN_MAX</span><span class="p">);</span>
        <span class="n">jdescType</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
        <span class="n">AudioEffect</span><span class="o">::</span><span class="n">guidToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">descriptors</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">uuid</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">EFFECT_STRING_LEN_MAX</span><span class="p">);</span>
        <span class="n">jdescUuid</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
        <span class="n">jdescConnect</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="s">&quot;Pre Processing&quot;</span><span class="p">);</span>
        <span class="n">jdescName</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">descriptors</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span><span class="p">);</span>
        <span class="n">jdescImplementor</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">descriptors</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">implementor</span><span class="p">);</span>

        <span class="n">jdesc</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewObject</span><span class="p">(</span><span class="n">fields</span><span class="p">.</span><span class="n">clazzDesc</span><span class="p">,</span>
                               <span class="n">fields</span><span class="p">.</span><span class="n">midDescCstor</span><span class="p">,</span>
                               <span class="n">jdescType</span><span class="p">,</span>
                               <span class="n">jdescUuid</span><span class="p">,</span>
                               <span class="n">jdescConnect</span><span class="p">,</span>
                               <span class="n">jdescName</span><span class="p">,</span>
                               <span class="n">jdescImplementor</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescType</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescUuid</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescConnect</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescName</span><span class="p">);</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">jdescImplementor</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">jdesc</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;env-&gt;NewObject(fields.clazzDesc, fields.midDescCstor)&quot;</span><span class="p">);</span>
            <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">ret</span><span class="p">);</span>
            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;;</span>
        <span class="p">}</span>

        <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetObjectArrayElement</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">jdesc</span><span class="p">);</span>
   <span class="p">}</span>

   <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// ----------------------------------------------------------------------------</span>

<span class="c1">// Dalvik VM type signatures</span>
<span class="k">static</span> <span class="n">JNINativeMethod</span> <span class="n">gMethods</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="s">&quot;native_init&quot;</span><span class="p">,</span>          <span class="s">&quot;()V&quot;</span><span class="p">,</span>      <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_init</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_setup&quot;</span><span class="p">,</span>         <span class="s">&quot;(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;II[I[Ljava/lang/Object;)I&quot;</span><span class="p">,</span>
                                         <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_setup</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_finalize&quot;</span><span class="p">,</span>      <span class="s">&quot;()V&quot;</span><span class="p">,</span>      <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_finalize</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_release&quot;</span><span class="p">,</span>       <span class="s">&quot;()V&quot;</span><span class="p">,</span>      <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_release</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_setEnabled&quot;</span><span class="p">,</span>    <span class="s">&quot;(Z)I&quot;</span><span class="p">,</span>      <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_setEnabled</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_getEnabled&quot;</span><span class="p">,</span>    <span class="s">&quot;()Z&quot;</span><span class="p">,</span>      <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_getEnabled</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_hasControl&quot;</span><span class="p">,</span>    <span class="s">&quot;()Z&quot;</span><span class="p">,</span>      <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_hasControl</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_setParameter&quot;</span><span class="p">,</span>  <span class="s">&quot;(I[BI[B)I&quot;</span><span class="p">,</span>  <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_setParameter</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_getParameter&quot;</span><span class="p">,</span>  <span class="s">&quot;(I[BI[B)I&quot;</span><span class="p">,</span>  <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_getParameter</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_command&quot;</span><span class="p">,</span>       <span class="s">&quot;(II[BI[B)I&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_command</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_query_effects&quot;</span><span class="p">,</span> <span class="s">&quot;()[Ljava/lang/Object;&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_queryEffects</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&quot;native_query_pre_processing&quot;</span><span class="p">,</span> <span class="s">&quot;(I)[Ljava/lang/Object;&quot;</span><span class="p">,</span>
            <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">android_media_AudioEffect_native_queryPreProcessings</span><span class="p">},</span>
<span class="p">};</span>


<span class="c1">// ----------------------------------------------------------------------------</span>

<span class="k">extern</span> <span class="kt">int</span> <span class="n">register_android_media_visualizer</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">);</span>

<span class="kt">int</span> <span class="n">register_android_media_AudioEffect</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">AndroidRuntime</span><span class="o">::</span><span class="n">registerNativeMethods</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">kClassPathName</span><span class="p">,</span> <span class="n">gMethods</span><span class="p">,</span> <span class="n">NELEM</span><span class="p">(</span><span class="n">gMethods</span><span class="p">));</span>
<span class="p">}</span>

<span class="n">jint</span> <span class="n">JNI_OnLoad</span><span class="p">(</span><span class="n">JavaVM</span><span class="o">*</span> <span class="n">vm</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">reserved</span><span class="p">)</span>
<span class="p">{</span>

    <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">jint</span> <span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">vm</span><span class="o">-&gt;</span><span class="n">GetEnv</span><span class="p">((</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">env</span><span class="p">,</span> <span class="n">JNI_VERSION_1_4</span><span class="p">)</span> <span class="o">!=</span> <span class="n">JNI_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;ERROR: GetEnv failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">bail</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">env</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">register_android_media_AudioEffect</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;ERROR: AudioEffect native registration failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">bail</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">register_android_media_visualizer</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;ERROR: Visualizer native registration failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">bail</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* success -- return valid version number */</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">JNI_VERSION_1_4</span><span class="p">;</span>

<span class="nl">bail:</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</pre></div>

<div style="text-align: center; margin: 10px;">
<form action="http://www.google.com/cse" id="cse-search-box">
        <div>
        <center>
        <input type="hidden" name="cx" value="012324609772651831024:a0t4fswrhoy"/>
        <input type="hidden" name="ie" value="UTF-8"/>
        <input type="text" name="q" size="21"/>
        <input type="submit" name="sa" value="Rechercher"/>
        </center>
</div>
</form>
<script type="text/javascript" src="http://www.google.com/cse/brand?form=cse-search-box&lang=fr"></script>
</div>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5414263-6']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</div>
</body>
</html>
